{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useRef, useMemo, useCallback, createContext, useContext } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render } from '../../utils/render.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { focusIn, FocusResult, Focus } from '../../utils/focus-management.esm.js';\nimport { useDescriptions, Description } from '../description/description.esm.js';\nimport { useTreeWalker } from '../../hooks/use-tree-walker.esm.js';\nimport { useFlags } from '../../hooks/use-flags.esm.js';\nimport { useLabels, Label } from '../label/label.esm.js';\n\nvar _reducers;\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"RegisterOption\"] = 0] = \"RegisterOption\";\n  ActionTypes[ActionTypes[\"UnregisterOption\"] = 1] = \"UnregisterOption\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.RegisterOption] = function (state, action) {\n  return _extends({}, state, {\n    options: [].concat(state.options, [{\n      id: action.id,\n      element: action.element,\n      propsRef: action.propsRef\n    }])\n  });\n}, _reducers[ActionTypes.UnregisterOption] = function (state, action) {\n  var options = state.options.slice();\n  var idx = state.options.findIndex(function (radio) {\n    return radio.id === action.id;\n  });\n  if (idx === -1) return state;\n  options.splice(idx, 1);\n  return _extends({}, state, {\n    options: options\n  });\n}, _reducers);\nvar RadioGroupContext = /*#__PURE__*/createContext(null);\nRadioGroupContext.displayName = 'RadioGroupContext';\n\nfunction useRadioGroupContext(component) {\n  var context = useContext(RadioGroupContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + RadioGroup.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_RADIO_GROUP_TAG = 'div';\n\nfunction RadioGroup(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"onChange\", \"disabled\"]);\n\n  var _useReducer = useReducer(stateReducer, {\n    options: []\n  }),\n      options = _useReducer[0].options,\n      dispatch = _useReducer[1];\n\n  var _useLabels = useLabels(),\n      labelledby = _useLabels[0],\n      LabelProvider = _useLabels[1];\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var id = \"headlessui-radiogroup-\" + useId();\n  var radioGroupRef = useRef(null);\n  var firstOption = useMemo(function () {\n    return options.find(function (option) {\n      if (option.propsRef.current.disabled) return false;\n      return true;\n    });\n  }, [options]);\n  var containsCheckedOption = useMemo(function () {\n    return options.some(function (option) {\n      return option.propsRef.current.value === value;\n    });\n  }, [options, value]);\n  var triggerChange = useCallback(function (nextValue) {\n    var _options$find;\n\n    if (disabled) return false;\n    if (nextValue === value) return false;\n    var nextOption = (_options$find = options.find(function (option) {\n      return option.propsRef.current.value === nextValue;\n    })) == null ? void 0 : _options$find.propsRef.current;\n    if (nextOption == null ? void 0 : nextOption.disabled) return false;\n    onChange(nextValue);\n    return true;\n  }, [onChange, value, disabled, options]);\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept: function accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk: function walk(node) {\n      node.setAttribute('role', 'none');\n    }\n  });\n  var handleKeyDown = useCallback(function (event) {\n    var container = radioGroupRef.current;\n    if (!container) return;\n    var all = options.filter(function (option) {\n      return option.propsRef.current.disabled === false;\n    }).map(function (radio) {\n      return radio.element.current;\n    });\n\n    switch (event.key) {\n      case Keys.ArrowLeft:\n      case Keys.ArrowUp:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          var result = focusIn(all, Focus.Previous | Focus.WrapAround);\n\n          if (result === FocusResult.Success) {\n            var activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n            if (activeOption) triggerChange(activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.ArrowRight:\n      case Keys.ArrowDown:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _result = focusIn(all, Focus.Next | Focus.WrapAround);\n\n          if (_result === FocusResult.Success) {\n            var _activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n\n            if (_activeOption) triggerChange(_activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.Space:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _activeOption2 = options.find(function (option) {\n            return option.element.current === document.activeElement;\n          });\n\n          if (_activeOption2) triggerChange(_activeOption2.propsRef.current.value);\n        }\n        break;\n    }\n  }, [radioGroupRef, options, triggerChange]);\n  var registerOption = useCallback(function (option) {\n    dispatch(_extends({\n      type: ActionTypes.RegisterOption\n    }, option));\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnregisterOption,\n        id: option.id\n      });\n    };\n  }, [dispatch]);\n  var api = useMemo(function () {\n    return {\n      registerOption: registerOption,\n      firstOption: firstOption,\n      containsCheckedOption: containsCheckedOption,\n      change: triggerChange,\n      disabled: disabled,\n      value: value\n    };\n  }, [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]);\n  var propsWeControl = {\n    ref: radioGroupRef,\n    id: id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, React.createElement(RadioGroupContext.Provider, {\n    value: api\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    defaultTag: DEFAULT_RADIO_GROUP_TAG,\n    name: 'RadioGroup'\n  }))));\n} // ---\n\n\nvar OptionState;\n\n(function (OptionState) {\n  OptionState[OptionState[\"Empty\"] = 1] = \"Empty\";\n  OptionState[OptionState[\"Active\"] = 2] = \"Active\";\n})(OptionState || (OptionState = {}));\n\nvar DEFAULT_OPTION_TAG = 'div';\n\nfunction Option(props) {\n  var optionRef = useRef(null);\n  var id = \"headlessui-radiogroup-option-\" + useId();\n\n  var _useLabels2 = useLabels(),\n      labelledby = _useLabels2[0],\n      LabelProvider = _useLabels2[1];\n\n  var _useDescriptions2 = useDescriptions(),\n      describedby = _useDescriptions2[0],\n      DescriptionProvider = _useDescriptions2[1];\n\n  var _useFlags = useFlags(OptionState.Empty),\n      addFlag = _useFlags.addFlag,\n      removeFlag = _useFlags.removeFlag,\n      hasFlag = _useFlags.hasFlag;\n\n  var value = props.value,\n      _props$disabled2 = props.disabled,\n      disabled = _props$disabled2 === void 0 ? false : _props$disabled2,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"disabled\"]);\n\n  var propsRef = useRef({\n    value: value,\n    disabled: disabled\n  });\n  useIsoMorphicEffect(function () {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(function () {\n    propsRef.current.disabled = disabled;\n  }, [disabled, propsRef]);\n\n  var _useRadioGroupContext = useRadioGroupContext([RadioGroup.name, Option.name].join('.')),\n      registerOption = _useRadioGroupContext.registerOption,\n      radioGroupDisabled = _useRadioGroupContext.disabled,\n      change = _useRadioGroupContext.change,\n      firstOption = _useRadioGroupContext.firstOption,\n      containsCheckedOption = _useRadioGroupContext.containsCheckedOption,\n      radioGroupValue = _useRadioGroupContext.value;\n\n  useIsoMorphicEffect(function () {\n    return registerOption({\n      id: id,\n      element: optionRef,\n      propsRef: propsRef\n    });\n  }, [id, registerOption, optionRef, props]);\n  var handleClick = useCallback(function () {\n    var _optionRef$current;\n\n    if (!change(value)) return;\n    addFlag(OptionState.Active);\n    (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.focus();\n  }, [addFlag, change, value]);\n  var handleFocus = useCallback(function () {\n    return addFlag(OptionState.Active);\n  }, [addFlag]);\n  var handleBlur = useCallback(function () {\n    return removeFlag(OptionState.Active);\n  }, [removeFlag]);\n  var isFirstOption = (firstOption == null ? void 0 : firstOption.id) === id;\n  var isDisabled = radioGroupDisabled || disabled;\n  var checked = radioGroupValue === value;\n  var propsWeControl = {\n    ref: optionRef,\n    id: id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: function () {\n      if (isDisabled) return -1;\n      if (checked) return 0;\n      if (!containsCheckedOption && isFirstOption) return 0;\n      return -1;\n    }(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur\n  };\n  var slot = useMemo(function () {\n    return {\n      checked: checked,\n      disabled: isDisabled,\n      active: hasFlag(OptionState.Active)\n    };\n  }, [checked, isDisabled, hasFlag]);\n  return React.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'RadioGroup.Option'\n  })));\n} // ---\n\n\nRadioGroup.Option = Option;\nRadioGroup.Label = Label;\nRadioGroup.Description = Description;\nexport { RadioGroup };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/components/radio-group/radio-group.tsx"],"names":["ActionTypes","reducers","options","state","id","action","element","propsRef","idx","radio","RadioGroupContext","createContext","context","useContext","err","RadioGroup","Error","match","DEFAULT_RADIO_GROUP_TAG","props","value","onChange","disabled","passThroughProps","dispatch","useReducer","labelledby","LabelProvider","useLabels","describedby","DescriptionProvider","useDescriptions","useId","radioGroupRef","useRef","firstOption","useMemo","option","containsCheckedOption","triggerChange","useCallback","nextValue","nextOption","useTreeWalker","container","accept","node","NodeFilter","walk","handleKeyDown","all","event","Keys","result","focusIn","Focus","FocusResult","activeOption","document","registerOption","type","RegisterOption","api","change","propsWeControl","ref","role","onKeyDown","name","render","defaultTag","OptionState","DEFAULT_OPTION_TAG","optionRef","addFlag","removeFlag","hasFlag","useFlags","useIsoMorphicEffect","radioGroupDisabled","radioGroupValue","useRadioGroupContext","Option","handleClick","handleFocus","handleBlur","isFirstOption","isDisabled","checked","tabIndex","onClick","onFocus","onBlur","slot","active"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n"]},"metadata":{},"sourceType":"module"}