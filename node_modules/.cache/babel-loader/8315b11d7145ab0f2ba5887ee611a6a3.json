{"ast":null,"code":"import { useState } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nimport { useServerHandoffComplete } from './use-server-handoff-complete.esm.js'; // didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nvar id = 0;\n\nfunction generateId() {\n  return ++id;\n}\n\nfunction useId() {\n  var ready = useServerHandoffComplete();\n\n  var _useState = useState(ready ? generateId : null),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useIsoMorphicEffect(function () {\n    if (id === null) setId(generateId());\n  }, [id]);\n  return id != null ? '' + id : undefined;\n}\n\nexport { useId };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/hooks/use-id.ts"],"names":["id","useId","ready","useServerHandoffComplete","setId","useState","useIsoMorphicEffect","generateId"],"mappings":";;iFAKA;AACA;AACA;AACA;;AAEA,IAAIA,EAAE,GAAN,CAAA;;AACA,SAAA,UAAA,GAAA;AACE,SAAO,EAAP,EAAA;AACD;;SAEeC,K,GAAAA;AACd,MAAIC,KAAK,GAAGC,wBAAZ,EAAA;;kBACkBE,QAAQ,CAACH,KAAK,GAAA,UAAA,GAAN,IAAA,C;MAArBF,EAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAII,KAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AAETE,EAAAA,mBAAmB,CAAC,YAAA;AAClB,QAAIN,EAAE,KAAN,IAAA,EAAiBI,KAAK,CAACG,UAANH,EAAK,CAALA;AADA,GAAA,EAEhB,CAFHE,EAEG,CAFgB,CAAnBA;AAIA,SAAON,EAAE,IAAFA,IAAAA,GAAa,KAAbA,EAAAA,GAAP,SAAA;AACD","sourcesContent":["import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n"]},"metadata":{},"sourceType":"module"}