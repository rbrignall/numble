{"ast":null,"code":"var _jsxFileName = \"/Users/rbrignall/Documents/GitHub/numble/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon } from '@heroicons/react/outline';\nimport { ChartBarIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { WinModal } from './components/modals/WinModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { isWordInWordList, isWinningWord, solution } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isWinModalOpen, setIsWinModalOpen] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [shareComplete, setShareComplete] = useState(false);\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    if (loaded.guesses.includes(solution)) {\n      setIsGameWon(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setIsWinModalOpen(true);\n    }\n  }, [isGameWon]);\n\n  const onChar = value => {\n    if (currentGuess.length < 5 && guesses.length < 6) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, 2000);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, 2000);\n    }\n\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n        return setTimeout(() => {\n          setIsGameLost(false);\n        }, 2000);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Not enough letters\",\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Word not found\",\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: `You lost, the word was ${solution}`,\n      isOpen: isGameLost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Game copied to clipboard\",\n      isOpen: shareComplete,\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl grow font-bold\",\n        children: \"Numble\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WinModal, {\n      isOpen: isWinModalOpen,\n      handleClose: () => setIsWinModalOpen(false),\n      guesses: guesses,\n      handleShare: () => {\n        setIsWinModalOpen(false);\n        setShareComplete(true);\n        return setTimeout(() => {\n          setShareComplete(false);\n        }, 2000);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      gameStats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: \"About this game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ctbuQr+JWdGZ8MXbcIhUs3vC+do=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","WinModal","StatsModal","isWordInWordList","isWinningWord","solution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","App","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isWinModalOpen","setIsWinModalOpen","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","shareComplete","setShareComplete","guesses","setGuesses","loaded","includes","stats","setStats","onChar","value","length","onDelete","slice","onEnter","setTimeout","winningWord"],"mappings":"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","sourcesContent":["import { InformationCircleIcon } from '@heroicons/react/outline'\nimport { ChartBarIcon } from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { WinModal } from './components/modals/WinModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { isWordInWordList, isWinningWord, solution } from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nfunction App() {\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isWinModalOpen, setIsWinModalOpen] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [shareComplete, setShareComplete] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    if (loaded.guesses.includes(solution)) {\n      setIsGameWon(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setIsWinModalOpen(true)\n    }\n  }, [isGameWon])\n\n  const onChar = (value: string) => {\n    if (currentGuess.length < 5 && guesses.length < 6) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, 2000)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, 2000)\n    }\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n        return setTimeout(() => {\n          setIsGameLost(false)\n        }, 2000)\n      }\n    }\n  }\n\n  return (\n    <div className=\"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <Alert message=\"Not enough letters\" isOpen={isNotEnoughLetters} />\n      <Alert message=\"Word not found\" isOpen={isWordNotFoundAlertOpen} />\n      <Alert\n        message={`You lost, the word was ${solution}`}\n        isOpen={isGameLost}\n      />\n      <Alert\n        message=\"Game copied to clipboard\"\n        isOpen={shareComplete}\n        variant=\"success\"\n      />\n      <div className=\"flex w-80 mx-auto items-center mb-8\">\n        <h1 className=\"text-xl grow font-bold\">Numble</h1>\n        <InformationCircleIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid guesses={guesses} currentGuess={currentGuess} />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n      />\n      <WinModal\n        isOpen={isWinModalOpen}\n        handleClose={() => setIsWinModalOpen(false)}\n        guesses={guesses}\n        handleShare={() => {\n          setIsWinModalOpen(false)\n          setShareComplete(true)\n          return setTimeout(() => {\n            setShareComplete(false)\n          }, 2000)\n        }}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        gameStats={stats}\n      />\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        About this game\n      </button>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}