{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useContext, useRef, useCallback, useMemo, createContext, useState, Fragment } from 'react';\nimport { render } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { Description, useDescriptions } from '../description/description.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\nimport { Label, useLabels } from '../label/label.esm.js';\nvar GroupContext = /*#__PURE__*/createContext(null);\nGroupContext.displayName = 'GroupContext'; // ---\n\nvar DEFAULT_GROUP_TAG = Fragment;\n\nfunction Group(props) {\n  var _useState = useState(null),\n      switchElement = _useState[0],\n      setSwitchElement = _useState[1];\n\n  var _useLabels = useLabels(),\n      labelledby = _useLabels[0],\n      LabelProvider = _useLabels[1];\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var context = useMemo(function () {\n    return {\n      \"switch\": switchElement,\n      setSwitch: setSwitchElement,\n      labelledby: labelledby,\n      describedby: describedby\n    };\n  }, [switchElement, setSwitchElement, labelledby, describedby]);\n  return React.createElement(DescriptionProvider, {\n    name: \"Switch.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"Switch.Label\",\n    props: {\n      onClick: function onClick() {\n        if (!switchElement) return;\n        switchElement.click();\n        switchElement.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, React.createElement(GroupContext.Provider, {\n    value: context\n  }, render({\n    props: props,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Switch.Group'\n  }))));\n} // ---\n\n\nvar DEFAULT_SWITCH_TAG = 'button';\n\nfunction Switch(props) {\n  var checked = props.checked,\n      onChange = props.onChange,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"checked\", \"onChange\"]);\n\n  var id = \"headlessui-switch-\" + useId();\n  var groupContext = useContext(GroupContext);\n  var internalSwitchRef = useRef(null);\n  var switchRef = useSyncRefs(internalSwitchRef, groupContext === null ? null : groupContext.setSwitch);\n  var toggle = useCallback(function () {\n    return onChange(!checked);\n  }, [onChange, checked]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    event.preventDefault();\n    toggle();\n  }, [toggle]);\n  var handleKeyUp = useCallback(function (event) {\n    if (event.key !== Keys.Tab) event.preventDefault();\n    if (event.key === Keys.Space) toggle();\n  }, [toggle]); // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n\n  var handleKeyPress = useCallback(function (event) {\n    return event.preventDefault();\n  }, []);\n  var slot = useMemo(function () {\n    return {\n      checked: checked\n    };\n  }, [checked]);\n  var propsWeControl = {\n    id: id,\n    ref: switchRef,\n    role: 'switch',\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext == null ? void 0 : groupContext.labelledby,\n    'aria-describedby': groupContext == null ? void 0 : groupContext.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress\n  };\n  return render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch'\n  });\n} // ---\n\n\nSwitch.Group = Group;\nSwitch.Label = Label;\nSwitch.Description = Description;\nexport { Switch };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/components/switch/switch.tsx"],"names":["GroupContext","createContext","DEFAULT_GROUP_TAG","switchElement","setSwitchElement","useState","labelledby","LabelProvider","useLabels","describedby","DescriptionProvider","useDescriptions","context","useMemo","setSwitch","name","props","onClick","preventScroll","value","render","defaultTag","DEFAULT_SWITCH_TAG","Switch","checked","onChange","passThroughProps","id","useId","groupContext","useContext","internalSwitchRef","useRef","switchRef","useSyncRefs","toggle","useCallback","handleClick","isDisabledReactIssue7711","event","handleKeyUp","Keys","handleKeyPress","slot","propsWeControl","ref","role","type","useResolveButtonType","tabIndex","onKeyUp","onKeyPress"],"mappings":"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","sourcesContent":["import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useRef,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { Label, useLabels } from '../label/label'\nimport { Description, useDescriptions } from '../description/description'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  setSwitch(element: HTMLButtonElement): void\n  labelledby: string | undefined\n  describedby: string | undefined\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let context = useMemo<StateDefinition>(\n    () => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }),\n    [switchElement, setSwitchElement, labelledby, describedby]\n  )\n\n  return (\n    <DescriptionProvider name=\"Switch.Description\">\n      <LabelProvider\n        name=\"Switch.Label\"\n        props={{\n          onClick() {\n            if (!switchElement) return\n            switchElement.click()\n            switchElement.focus({ preventScroll: true })\n          },\n        }}\n      >\n        <GroupContext.Provider value={context}>\n          {render({ props, defaultTag: DEFAULT_GROUP_TAG, name: 'Switch.Group' })}\n        </GroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n  let internalSwitchRef = useRef<HTMLButtonElement | null>(null)\n  let switchRef = useSyncRefs(\n    internalSwitchRef,\n    groupContext === null ? null : groupContext.setSwitch\n  )\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let slot = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: switchRef,\n    role: 'switch',\n    type: useResolveButtonType(props, internalSwitchRef),\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.labelledby,\n    'aria-describedby': groupContext?.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch',\n  })\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n"]},"metadata":{},"sourceType":"module"}