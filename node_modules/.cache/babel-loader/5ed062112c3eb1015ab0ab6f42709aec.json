{"ast":null,"code":"import { createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nvar interactables = /*#__PURE__*/new Set();\nvar originals = /*#__PURE__*/new Map();\n\nfunction inert(element) {\n  element.setAttribute('aria-hidden', 'true'); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = true;\n}\n\nfunction restore(element) {\n  var original = originals.get(element);\n  if (!original) return;\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden');else element.setAttribute('aria-hidden', original['aria-hidden']); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = original.inert;\n}\n\nfunction useInertOthers(container, enabled) {\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  useIsoMorphicEffect(function () {\n    if (!enabled) return;\n    if (!container.current) return;\n    var element = container.current; // Mark myself as an interactable element\n\n    interactables.add(element); // Restore elements that now contain an interactable child\n\n    for (var _iterator = _createForOfIteratorHelperLoose(originals.keys()), _step; !(_step = _iterator()).done;) {\n      var original = _step.value;\n\n      if (original.contains(element)) {\n        restore(original);\n        originals[\"delete\"](original);\n      }\n    } // Collect direct children of the body\n\n\n    document.querySelectorAll('body > *').forEach(function (child) {\n      if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n      // Skip the interactables, and the parents of the interactables\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(interactables), _step2; !(_step2 = _iterator2()).done;) {\n        var interactable = _step2.value;\n        if (child.contains(interactable)) return;\n      } // Keep track of the elements\n\n\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert\n        }); // Mutate the element\n\n        inert(child);\n      }\n    });\n    return function () {\n      // Inert is disabled on the current element\n      interactables[\"delete\"](element); // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(function (child) {\n          if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n          // Skip already inert parents\n\n          if (originals.has(child)) return; // Skip the interactables, and the parents of the interactables\n\n          for (var _iterator3 = _createForOfIteratorHelperLoose(interactables), _step3; !(_step3 = _iterator3()).done;) {\n            var interactable = _step3.value;\n            if (child.contains(interactable)) return;\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert\n          }); // Mutate the element\n\n          inert(child);\n        });\n      } else {\n        for (var _iterator4 = _createForOfIteratorHelperLoose(originals.keys()), _step4; !(_step4 = _iterator4()).done;) {\n          var _element = _step4.value; // Restore\n\n          restore(_element); // Cleanup\n\n          originals[\"delete\"](_element);\n        }\n      }\n    };\n  }, [enabled]);\n}\n\nexport { useInertOthers };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/hooks/use-inert-others.ts"],"names":["interactables","originals","element","original","useInertOthers","container","enabled","useIsoMorphicEffect","restore","document","child","interactable","inert"],"mappings":"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","sourcesContent":["import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n"]},"metadata":{},"sourceType":"module"}