{"ast":null,"code":"import React, { createContext, useContext, useCallback } from 'react';\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect.esm.js';\nvar StackContext = /*#__PURE__*/createContext(function () {});\nStackContext.displayName = 'StackContext';\nvar StackMessage;\n\n(function (StackMessage) {\n  StackMessage[StackMessage[\"Add\"] = 0] = \"Add\";\n  StackMessage[StackMessage[\"Remove\"] = 1] = \"Remove\";\n})(StackMessage || (StackMessage = {}));\n\nfunction useStackContext() {\n  return useContext(StackContext);\n}\n\nfunction StackProvider(_ref) {\n  var children = _ref.children,\n      onUpdate = _ref.onUpdate,\n      type = _ref.type,\n      element = _ref.element;\n  var parentUpdate = useStackContext();\n  var notify = useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    } // Notify our layer\n\n\n    onUpdate == null ? void 0 : onUpdate.apply(void 0, args); // Notify the parent\n\n    parentUpdate.apply(void 0, args);\n  }, [parentUpdate, onUpdate]);\n  useIsoMorphicEffect(function () {\n    notify(StackMessage.Add, type, element);\n    return function () {\n      return notify(StackMessage.Remove, type, element);\n    };\n  }, [notify, type, element]);\n  return React.createElement(StackContext.Provider, {\n    value: notify\n  }, children);\n}\n\nexport { StackMessage, StackProvider, useStackContext };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/internal/stack-context.tsx"],"names":["StackContext","createContext","StackMessage","useStackContext","useContext","StackProvider","children","onUpdate","type","element","parentUpdate","notify","useCallback","args","useIsoMorphicEffect","value"],"mappings":";;AAiBA,IAAIA,YAAY,GAAA,aAAGC,aAAa,CAAW,YAAA,CAA3C,CAAgC,CAAhC;AACAD,YAAY,CAAZA,WAAAA,GAAAA,cAAAA;IAEYE,Y;;AAAZ,CAAA,UAAYA,YAAZ,EAAYA;AACVA,EAAAA,YAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA;AACAA,EAAAA,YAAAA,CAAAA,YAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,QAAAA;AAFF,CAAA,EAAYA,YAAY,KAAZA,YAAY,GAAxB,EAAwB,CAAxB;;SAKgBC,e,GAAAA;AACd,SAAOC,UAAU,CAAjB,YAAiB,CAAjB;AACD;;SAEeC,a,CAAAA,I,EAAAA;MACdC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAC,OAAAA,GAAAA,IAAAA,CAAAA,O;AAOA,MAAIC,YAAY,GAAGP,eAAnB,EAAA;AAEA,MAAIQ,MAAM,GAAGC,WAAW,CACtB,YAAA;sCAAIC,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,C,EAAAA,IAAAA,GAAAA,C,EAAAA,IAAAA,GAAAA,I,EAAAA,IAAAA,E,EAAAA;AAAAA,MAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;KAAJ,CACE;;;AACAN,IAAAA,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAARA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,IAAAA,CAAAA,CAFF,CAEEA;;AAGAG,IAAAA,YAAY,CAAZA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,IAAAA;AANoB,GAAA,EAQtB,CAAA,YAAA,EARF,QAQE,CARsB,CAAxB;AAWAI,EAAAA,mBAAmB,CAAC,YAAA;AAClBH,IAAAA,MAAM,CAACT,YAAY,CAAb,GAAA,EAAA,IAAA,EAANS,OAAM,CAANA;AACA,WAAO,YAAA;AAAA,aAAMA,MAAM,CAACT,YAAY,CAAb,MAAA,EAAA,IAAA,EAAZ,OAAY,CAAZ;AAAP,KAAA;AAFiB,GAAA,EAGhB,CAAA,MAAA,EAAA,IAAA,EAHHY,OAGG,CAHgB,CAAnBA;AAKA,SAAO,KAAA,CAAA,aAAA,CAACd,YAAY,CAAb,QAAA,EAAA;AAAuBe,IAAAA,KAAK,EAAEJ;AAA9B,GAAA,EAAP,QAAO,CAAP;AACD","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}