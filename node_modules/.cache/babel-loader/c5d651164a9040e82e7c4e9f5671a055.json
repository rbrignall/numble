{"ast":null,"code":"import { loadStatsFromLocalStorage, saveStatsToLocalStorage } from './localStorage'; // In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (gameStats, count) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats\n  };\n  stats.totalGames += 1;\n\n  if (count > 5) {\n    // A fail situation\n    stats.currentStreak = 0;\n    stats.gamesFailed += 1;\n  } else {\n    stats.winDistribution[count] += 1;\n    stats.currentStreak += 1;\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak;\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats);\n  saveStatsToLocalStorage(stats);\n  return stats;\n};\nconst defaultStats = {\n  winDistribution: [0, 0, 0, 0, 0, 0],\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0\n};\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats;\n};\n\nconst getSuccessRate = gameStats => {\n  const {\n    totalGames,\n    gamesFailed\n  } = gameStats;\n  return Math.round(100 * (totalGames - gamesFailed) / Math.max(totalGames, 1));\n};","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/src/lib/stats.ts"],"names":["loadStatsFromLocalStorage","saveStatsToLocalStorage","addStatsForCompletedGame","gameStats","count","stats","totalGames","currentStreak","gamesFailed","winDistribution","bestStreak","successRate","getSuccessRate","defaultStats","loadStats","Math","round","max"],"mappings":"AAAA,SAEEA,yBAFF,EAGEC,uBAHF,QAIO,gBAJP,C,CAMA;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CACtCC,SADsC,EAEtCC,KAFsC,KAGnC;AACH;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGF;AAAL,GAAd;AAEAE,EAAAA,KAAK,CAACC,UAAN,IAAoB,CAApB;;AAEA,MAAIF,KAAK,GAAG,CAAZ,EAAe;AACb;AACAC,IAAAA,KAAK,CAACE,aAAN,GAAsB,CAAtB;AACAF,IAAAA,KAAK,CAACG,WAAN,IAAqB,CAArB;AACD,GAJD,MAIO;AACLH,IAAAA,KAAK,CAACI,eAAN,CAAsBL,KAAtB,KAAgC,CAAhC;AACAC,IAAAA,KAAK,CAACE,aAAN,IAAuB,CAAvB;;AAEA,QAAIF,KAAK,CAACK,UAAN,GAAmBL,KAAK,CAACE,aAA7B,EAA4C;AAC1CF,MAAAA,KAAK,CAACK,UAAN,GAAmBL,KAAK,CAACE,aAAzB;AACD;AACF;;AAEDF,EAAAA,KAAK,CAACM,WAAN,GAAoBC,cAAc,CAACP,KAAD,CAAlC;AAEAJ,EAAAA,uBAAuB,CAACI,KAAD,CAAvB;AACA,SAAOA,KAAP;AACD,CA1BM;AA4BP,MAAMQ,YAAuB,GAAG;AAC9BJ,EAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CADa;AAE9BD,EAAAA,WAAW,EAAE,CAFiB;AAG9BD,EAAAA,aAAa,EAAE,CAHe;AAI9BG,EAAAA,UAAU,EAAE,CAJkB;AAK9BJ,EAAAA,UAAU,EAAE,CALkB;AAM9BK,EAAAA,WAAW,EAAE;AANiB,CAAhC;AASA,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC7B,SAAOd,yBAAyB,MAAMa,YAAtC;AACD,CAFM;;AAIP,MAAMD,cAAc,GAAIT,SAAD,IAA0B;AAC/C,QAAM;AAAEG,IAAAA,UAAF;AAAcE,IAAAA;AAAd,MAA8BL,SAApC;AAEA,SAAOY,IAAI,CAACC,KAAL,CACJ,OAAOV,UAAU,GAAGE,WAApB,CAAD,GAAqCO,IAAI,CAACE,GAAL,CAASX,UAAT,EAAqB,CAArB,CADhC,CAAP;AAGD,CAND","sourcesContent":["import {\n  GameStats,\n  loadStatsFromLocalStorage,\n  saveStatsToLocalStorage,\n} from './localStorage'\n\n// In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (\n  gameStats: GameStats,\n  count: number\n) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats }\n\n  stats.totalGames += 1\n\n  if (count > 5) {\n    // A fail situation\n    stats.currentStreak = 0\n    stats.gamesFailed += 1\n  } else {\n    stats.winDistribution[count] += 1\n    stats.currentStreak += 1\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats)\n\n  saveStatsToLocalStorage(stats)\n  return stats\n}\n\nconst defaultStats: GameStats = {\n  winDistribution: [0, 0, 0, 0, 0, 0],\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0,\n}\n\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats\n}\n\nconst getSuccessRate = (gameStats: GameStats) => {\n  const { totalGames, gamesFailed } = gameStats\n\n  return Math.round(\n    (100 * (totalGames - gamesFailed)) / Math.max(totalGames, 1)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}