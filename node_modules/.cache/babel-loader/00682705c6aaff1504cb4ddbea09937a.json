{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { createContext, useCallback, useMemo, useEffect, useContext, useState, useRef, useReducer } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { forwardRefWithAs, render, Features as Features$1 } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { useWindowEvent } from '../../hooks/use-window-event.esm.js';\nimport { useFocusTrap, Features } from '../../hooks/use-focus-trap.esm.js';\nimport { useInertOthers } from '../../hooks/use-inert-others.esm.js';\nimport { ForcePortalRoot } from '../../internal/portal-force-root.esm.js';\nimport { Portal } from '../portal/portal.esm.js';\nimport { Description, useDescriptions } from '../description/description.esm.js';\nimport { useOpenClosed, State } from '../../internal/open-closed.esm.js';\nimport { StackProvider, StackMessage } from '../../internal/stack-context.esm.js';\n\nvar _reducers;\n\nvar DialogStates;\n\n(function (DialogStates) {\n  DialogStates[DialogStates[\"Open\"] = 0] = \"Open\";\n  DialogStates[DialogStates[\"Closed\"] = 1] = \"Closed\";\n})(DialogStates || (DialogStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"SetTitleId\"] = 0] = \"SetTitleId\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.SetTitleId] = function (state, action) {\n  if (state.titleId === action.id) return state;\n  return _extends({}, state, {\n    titleId: action.id\n  });\n}, _reducers);\nvar DialogContext = /*#__PURE__*/createContext(null);\nDialogContext.displayName = 'DialogContext';\n\nfunction useDialogContext(component) {\n  var context = useContext(DialogContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Dialog.displayName + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_DIALOG_TAG = 'div';\nvar DialogRenderFeatures = Features$1.RenderStrategy | Features$1.Static;\nvar DialogRoot = /*#__PURE__*/forwardRefWithAs(function Dialog(props, ref) {\n  var open = props.open,\n      onClose = props.onClose,\n      initialFocus = props.initialFocus,\n      rest = _objectWithoutPropertiesLoose(props, [\"open\", \"onClose\", \"initialFocus\"]);\n\n  var _useState = useState(0),\n      nestedDialogCount = _useState[0],\n      setNestedDialogCount = _useState[1];\n\n  var usesOpenClosedState = useOpenClosed();\n\n  if (open === undefined && usesOpenClosedState !== null) {\n    var _match; // Update the `open` prop based on the open closed state\n\n\n    open = match(usesOpenClosedState, (_match = {}, _match[State.Open] = true, _match[State.Closed] = false, _match));\n  }\n\n  var containers = useRef(new Set());\n  var internalDialogRef = useRef(null);\n  var dialogRef = useSyncRefs(internalDialogRef, ref); // Validations\n\n  var hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null;\n  var hasOnClose = props.hasOwnProperty('onClose');\n\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\"You have to provide an `open` and an `onClose` prop to the `Dialog` component.\");\n  }\n\n  if (!hasOpen) {\n    throw new Error(\"You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.\");\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\"You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.\");\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\"You provided an `open` prop to the `Dialog`, but the value is not a boolean. Received: \" + open);\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\"You provided an `onClose` prop to the `Dialog`, but the value is not a function. Received: \" + onClose);\n  }\n\n  var dialogState = open ? DialogStates.Open : DialogStates.Closed;\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return dialogState === DialogStates.Open;\n  }();\n\n  var _useReducer = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var close = useCallback(function () {\n    return onClose(false);\n  }, [onClose]);\n  var setTitleId = useCallback(function (id) {\n    return dispatch({\n      type: ActionTypes.SetTitleId,\n      id: id\n    });\n  }, [dispatch]);\n  var ready = useServerHandoffComplete();\n  var enabled = ready && dialogState === DialogStates.Open;\n  var hasNestedDialogs = nestedDialogCount > 1; // 1 is the current dialog\n\n  var hasParentDialog = useContext(DialogContext) !== null; // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n\n  var position = !hasNestedDialogs ? 'leaf' : 'parent';\n  useFocusTrap(internalDialogRef, enabled ? match(position, {\n    parent: Features.RestoreFocus,\n    leaf: Features.All\n  }) : Features.None, {\n    initialFocus: initialFocus,\n    containers: containers\n  });\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var _internalDialogRef$cu;\n\n    var target = event.target;\n    if (dialogState !== DialogStates.Open) return;\n    if (hasNestedDialogs) return;\n    if ((_internalDialogRef$cu = internalDialogRef.current) == null ? void 0 : _internalDialogRef$cu.contains(target)) return;\n    close();\n  }); // Handle `Escape` to close\n\n  useWindowEvent('keydown', function (event) {\n    if (event.key !== Keys.Escape) return;\n    if (dialogState !== DialogStates.Open) return;\n    if (hasNestedDialogs) return;\n    event.preventDefault();\n    event.stopPropagation();\n    close();\n  }); // Scroll lock\n\n  useEffect(function () {\n    if (dialogState !== DialogStates.Open) return;\n    if (hasParentDialog) return;\n    var overflow = document.documentElement.style.overflow;\n    var paddingRight = document.documentElement.style.paddingRight;\n    var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n    document.documentElement.style.overflow = 'hidden';\n    document.documentElement.style.paddingRight = scrollbarWidth + \"px\";\n    return function () {\n      document.documentElement.style.overflow = overflow;\n      document.documentElement.style.paddingRight = paddingRight;\n    };\n  }, [dialogState, hasParentDialog]); // Trigger close when the FocusTrap gets hidden\n\n  useEffect(function () {\n    if (dialogState !== DialogStates.Open) return;\n    if (!internalDialogRef.current) return;\n    var observer = new IntersectionObserver(function (entries) {\n      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {\n        var entry = _step.value;\n\n        if (entry.boundingClientRect.x === 0 && entry.boundingClientRect.y === 0 && entry.boundingClientRect.width === 0 && entry.boundingClientRect.height === 0) {\n          close();\n        }\n      }\n    });\n    observer.observe(internalDialogRef.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [dialogState, internalDialogRef, close]);\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var id = \"headlessui-dialog-\" + useId();\n  var contextBag = useMemo(function () {\n    return [{\n      dialogState: dialogState,\n      close: close,\n      setTitleId: setTitleId\n    }, state];\n  }, [dialogState, state, close, setTitleId]);\n  var slot = useMemo(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    ref: dialogRef,\n    id: id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick: function onClick(event) {\n      event.stopPropagation();\n    }\n  };\n  var passthroughProps = rest;\n  return React.createElement(StackProvider, {\n    type: \"Dialog\",\n    element: internalDialogRef,\n    onUpdate: useCallback(function (message, type, element) {\n      var _match2;\n\n      if (type !== 'Dialog') return;\n      match(message, (_match2 = {}, _match2[StackMessage.Add] = function () {\n        containers.current.add(element);\n        setNestedDialogCount(function (count) {\n          return count + 1;\n        });\n      }, _match2[StackMessage.Remove] = function () {\n        containers.current.add(element);\n        setNestedDialogCount(function (count) {\n          return count - 1;\n        });\n      }, _match2));\n    }, [])\n  }, React.createElement(ForcePortalRoot, {\n    force: true\n  }, React.createElement(Portal, null, React.createElement(DialogContext.Provider, {\n    value: contextBag\n  }, React.createElement(Portal.Group, {\n    target: internalDialogRef\n  }, React.createElement(ForcePortalRoot, {\n    force: false\n  }, React.createElement(DescriptionProvider, {\n    slot: slot,\n    name: \"Dialog.Description\"\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_DIALOG_TAG,\n    features: DialogRenderFeatures,\n    visible: visible,\n    name: 'Dialog'\n  }))))))));\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _useDialogContext = useDialogContext([Dialog.displayName, Overlay.name].join('.')),\n      _useDialogContext$ = _useDialogContext[0],\n      dialogState = _useDialogContext$.dialogState,\n      close = _useDialogContext$.close;\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-dialog-overlay-\" + useId();\n  var handleClick = useCallback(function (event) {\n    if (event.target !== event.currentTarget) return;\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    event.preventDefault();\n    event.stopPropagation();\n    close();\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_TITLE_TAG = 'h2';\n\nfunction Title(props) {\n  var _useDialogContext2 = useDialogContext([Dialog.displayName, Title.name].join('.')),\n      _useDialogContext2$ = _useDialogContext2[0],\n      dialogState = _useDialogContext2$.dialogState,\n      setTitleId = _useDialogContext2$.setTitleId;\n\n  var id = \"headlessui-dialog-title-\" + useId();\n  useEffect(function () {\n    setTitleId(id);\n    return function () {\n      return setTitleId(null);\n    };\n  }, [id, setTitleId]);\n  var slot = useMemo(function () {\n    return {\n      open: dialogState === DialogStates.Open\n    };\n  }, [dialogState]);\n  var propsWeControl = {\n    id: id\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title'\n  });\n} // ---\n\n\nvar Dialog = /*#__PURE__*/Object.assign(DialogRoot, {\n  Overlay: Overlay,\n  Title: Title,\n  Description: Description\n});\nexport { Dialog };","map":{"version":3,"sources":["/Users/rbrignall/Documents/GitHub/numble/node_modules/@headlessui/react/src/components/dialog/dialog.tsx"],"names":["DialogStates","ActionTypes","reducers","state","action","titleId","id","DialogContext","createContext","context","useContext","err","Dialog","Error","match","DEFAULT_DIALOG_TAG","DialogRenderFeatures","Features","DialogRoot","forwardRefWithAs","open","onClose","initialFocus","rest","props","nestedDialogCount","setNestedDialogCount","useState","usesOpenClosedState","useOpenClosed","State","containers","useRef","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","dispatch","useReducer","descriptionId","close","useCallback","setTitleId","type","ready","useServerHandoffComplete","enabled","hasNestedDialogs","hasParentDialog","position","useFocusTrap","parent","FocusTrapFeatures","leaf","All","useInertOthers","useWindowEvent","target","event","Keys","useEffect","overflow","document","paddingRight","scrollbarWidth","window","observer","entry","describedby","DescriptionProvider","useDescriptions","useId","contextBag","useMemo","slot","Open","propsWeControl","ref","role","onClick","passthroughProps","element","onUpdate","StackMessage","count","force","React","value","Portal","name","render","defaultTag","features","DEFAULT_OVERLAY_TAG","Overlay","useDialogContext","overlayRef","handleClick","isDisabledReactIssue7711","DEFAULT_TITLE_TAG","Title","Description"],"mappings":"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","sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Handle `Escape` to close\n  useWindowEvent('keydown', event => {\n    if (event.key !== Keys.Escape) return\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    event.preventDefault()\n    event.stopPropagation()\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (event.target !== event.currentTarget) return\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n"]},"metadata":{},"sourceType":"module"}